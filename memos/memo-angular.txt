
Injection de HTML: ng-bind-html
   <span ng-show="$ctrl.errorMessage !== ''" class="adressOnMapErrorMessage"
                        ng-bind-html="$ctrl.errorMessage">
                </span>

    <!-- Installer angular-sanitize


Retrouver $routeParams dans un controlleur de route: utiliser la bonne déclaration de controlleur
(ci-dessous) ou l'objet injecté sera systematiquement vide.

Déclarer dynamiquement des routes: Attention à faire les déclarations de controlleur avant celles des routes
cad hors de la méthode .config !

        // déclarer dynamiquement les controlleurs
        for (var elmtK in vm.views) {
            var elmt = vm.views[elmtK];

            // declarer le controlleur, au nom de l'url simple
            if (typeof elmt.controller !== "undefined") {
                angularMod.controller(controllerNameOf(elmt),
                    elmt.controller);
            }
        }


        // declarer dynamiquement les routes
        angularMod.config(['$routeProvider', function ($routeProvider) {

            // iterer les vues diponibles pour établir les routes possibles
            for (var elmtK in vm.views) {
                var elmt = vm.views[elmtK];

                // verifier les patterns de routes
                if (elmt.urlPatterns instanceof Array !== true) {
                    throw constants.INVALID_ARGUMENT;
                }

                // iterer les differentes routes possibe pour les déclarer
                for (var r in elmt.urlPatterns) {

                    var route = elmt.urlPatterns[r];

                    // parametres de la route
                    var params = {
                        template: makeViewTemplate(elmt),
                        controller: controllerNameOf(elmt),
                        controllerAs: "$ctrl"
                    };

                    // creation de la route
                    $routeProvider.when(route, params);

                }

            }


Drag and drop, a completer
     // fonction executee en cas de drag
                this.dragSuccess = function (data, event) {
                    // console.log("dragSuccess");
                    // console.log(data);
                    // console.log(event);
                }
                // fonction executee en cas de drag
                this.dropSuccess = function (data, event) {

                    console.log("dropSuccess");
                    console.log(data);
                    console.log(event);
                }

    <!-- Liste des infirmières -->
    <div layout="col">

        <div ng-repeat="nrs in $ctrl.allNurses" style="margin: 10px; background: red"
             ng-drag="true" ng-drag-data="nrs" ng-drag-success="$ctrl.dragSuccess($data, $event)"
             ng-center-anchor="true">

            {{nrs.name + " " + nrs.firstname}} (Patients affectés: {{nrs.patientNbr}})</div>

    </div>

    <!--<div>{{$ctrl}}</div>-->

    <!-- Liste des patients -->
    <patient ng-repeat="elmt in $ctrl.nonAffectedPatients" data="elmt"
             nurses="$ctrl.allNurses" on-patient-modified="$ctrl.updateDatas()"></patient>


Injection de dépendance dans les routes: resolve, qui renvoi un service enregistré
    $routeProvider
         .when(
             "/search", {
                 template: require("./search-view.html"),
                 controller: function ($location) {
                     console.log($location);
                     console.log(this);
                     console.log(vm);
                 },
                 resolve: {
                     $location: "$location"
                 }
             }
         );

Angular route:
    Attention: Si pas de ng-view dans le document, pas de route lulu !

Insérer un template dans une balise
    <script type="text/ng-template" id="embedded.about.html">
        <h1> About </h1>
    </script>

Pratique pour debugger:
    $scope.$watch(this.patient, function (oldVal, newVal) {
           console.log("Changing !", oldVal, newVal);
       });


Executer du code après le rendu angular
    // principe: executer une fonction adans un settimeout(function, 0)

    // Execution d'une fonction après les operations de rendu d'angular
    // Utilisé pour initialisation tardive de la carte. Voir constructeur.
    // Source: http://gsferreira.com/archive/2015/03/angularjs-after-render-directive/
    angularMod.directive('afterRender', ['$timeout', function ($timeout) {
            var def = {
                restrict: 'A',
                terminal: true,
                transclude: false,
                link: function (scope, element, attrs) {
                    $timeout(scope.$eval(attrs.afterRender), 3000);
                }
            };
            return def;
        }]);
    

Surveiller une variable
    
    // syntaxe
    $scope.$watch(var, cb(oldVal, newVal){})

    // ici une fonction est utilisée pour retournée la variable
    var vm = this;
    this.$scope.$watch(function () {
        return vm.adress;
    }, function (newValue, oldValue) {
        alert('La variable a été modifiée: ' + newValue + " " + oldValue);
    });


Lier un formulaire à un controlleur:
    <form action="/" method="post" name="$ctrl.connexionForm">
    ....

    Sera accessible ensuite de le controleur du composant via:
    this.connexionForm....


Flex et layout
Flex permet de positionner les elements de maniere responsive. Doit être encapsulé dans un
layout="". 
        flex: largeur ou hauteur en %
        flex-offset: decalage en %
        <div layout ='row' ng-cloak>
            <md-whiteframe class="md-whiteframe" flex="50" flex-offset="25" ...


Utilisation des filtres pour optimisation:
    
    // déconseillé
    {{ someFunction(someVar) }}

    // utiliser plutot
    {{ someVar | someFilter }}

    Ainsi angular n'executera pas systematiquement la fonction pour surveiller 
    les changements dans la variable.

    // implementation du filtre
    app.filter("someFilter", function{
        return function(input){
            console.log(input);
        }
    });


Mise à jour de valeurs (syntaxe alternative):
    $scope.$apply(function(){
        // sera executé avant l'appel d'apply
    });

Service interval synchronisé:
    $interval(function(){
        console.log('Eviter l'emploi de la fonction $scope.$apply');
    }, 1000);

Installation:
    $ npm install --save-dev angular angular-material angular-animate angular-aria

/!\ ng-model: correspond à du two-way data binding

/!\ Attention: les promesses angular ne sont pas celle de Javascript

Utilisation des services: injection d'arguments dans la création du controlleur.

    Fichier 'service.js'
    --------------------
    
    // créer le service avec une/des méthode(s) utiles
    var serviceAngular = function($http){
        this.doSomething = function(){
            console.log("Something done !");
        };
    }

    // injecter les dépendances utiles (arguments utilisés lors de l'instanciation)
    serviceAngular.$inject = [ "$http" ]; //Injection de dépendances

    // retourne une fonction qui permet d'enregistrer un service dans un mdoule angular
    module.exports = function(moduleAngular) {

        // nom du service
        var id = "serviceAngular";

        // enregistrer le service
        moduleAngular.service(id, serviceAngular);

        // retourner l'id
        return id;
    };

    Fichier utilisateurService.js
    -----------------------------
    
    // créer un module angular
    var moduleAngular = angular.module("module", []);

    // enregistrer le sevice dans le module et récupérer son identifiant (string)
    var idService = require( "./service.js" )(moduleAngular);

    // créer l'objet utilisant le service
    var controller = function( service ) {
        service.doSomething();
    }

    // injecter le service
    controller.$inject = [ idService ];


Informations sur Angular:
    http://www.johnpapa.net
    IRC: #javascript, #angular (freenode)

Formulaires avec Angular
    <form layout="column" ng-submit="code javascript">
        <!-- L'attribut layout est défini par Material Design et permet d'afficher en colonne le contenu -->
        <!-- L'attribut ng-submit est défini par Angular et permet d'éxécuter du code Javascript à l'envoi du formulaire -->

        <input ng-model="$ctrl.field" type="text" />
        <!-- Synchronisation bi-directionnelle avec le champs 'field'. Si le modéle est modifié l'affichage sera modifié,
            si l'affichage est modifié le modele sera modifié -->
    
           
        <md-button ng-click="$ctrl.dosomething()" ...>
        <!-- ng-click permet d'éxecuter du code javascript dans le bon contexte -->

    </form>

Faire un boucle avec des directives Angular
    <... ng-controller="PhoneListCtrl">

      <ul>
        <!-- Créer un element LI par 'phone' -->
        <li ng-repeat="phone in phones">
          <span>{{phone.name}}</span>
          <p>{{phone.snippet}}</p>
        </li>
      </ul>

    </...>

Appeler Angular et Angular-material avec webpack/gulp
    var angular = require("angular");
    var angularMaterial = require("angular-material");
    require("angular-material/angular-material.css");

Créer un nouveau module Angular vide

    // /!\ Les modules angular sont différents des modules CommonJS/Webpack

    var mod = angular.module("module", []);
    
    // ou créer un nouveau module contenant des élements d'autres modules
    var extMod = angular.module("moduleEtendu", [angularMaterial]);



Ajouter un composant

    Remarque sur les noms: Dans la déclaration Angular le nom doit respecter
    la norme Camel Case (ecritCommeCa) alors que dans le code html les mots sont
    séparés par des tirets (ecrit-comme-ca)

    mod.component("nomComposant", {
      // Le template HTML à charger, éventuellement chargé à partir d'un fichier
      template: "...",
      // Ajouter des liaisons de donnée, ici un argument spécial de la balise
      bindings: {
        customArg: "@", // prendra la valeur de l'attribut html customarg
        customArg2: "<", // < = synchronisation unidirectionnelle, si customArg2 est modifié, l'affichage sera modifié.
      },
      controller: function() {
        // Le controleur est un objet instancié à chaque création de composant.
        // Cette fonction agit comme un constructeur. Il sera ensuite disponible
        // dans le composant via $ctrl
      }
    });

    Appel dans le fichier HTML
        <body ng-app="module">
        ...
        <nom-composant customArg='value'>
        ...
        {{$ctrl.doSomething()}}


Méthode angular de création de directives, à utiliser uniquement
pour les besoins spécifiques. Préférer les constructeurs de composants.
 

Exemple de balise:
    <bhsm-liste data="myDataObject" titre="Ma liste de course" onModified="console.log('hello!');">

Ajouter une directive, toutes les balises bshm-liste d'un document html seront "compilés"
    app.directive("bshm-liste", function() {
      return {
        restrict: 'E', // 'E' pour balise, 'A' pour attribut
        binToController: true,
        controllerAs: "ctrl", // nom du controlleur, ou définition: function(){
        template: "...", // template html de l'élément
        scope: {
          data: "<", // valeur sera un objets
          titre: "@", // valeur sera du texte
          onModified: "&" // evaluer comme du javascript
        }
      };
    });

Rafraichir si on utilise des mecanismes non interne à angular (par exemple les promesses javascript)
    // si pas d'utilisation des promesses angular, via les méthodes http et tout ça, mettre à jour angular
    // en appelant cette méthode
    $scope.$apply();

    // avec eventuellement
    object.$inject = ["$scope"];

    Exemple:
    // récupérer les infirmiers du cabinet en asynchrone
        datah.getNurses().then(function (response) {
            vm.nurses = response;
            // si pas d'utilisation des promesses angular, via les méthodes http et tout ça, mettre à jour angular 
            // en appelant cette méthode
            $scope.$apply();
        });


Lister un attribut composé du controleur dans la vue:
    <ul>
        <li ng-repeat="inf in $ctrl.informations">
            {{ inf | json }}
        </li>
    </ul>
    
Problème d'affichage de messages Input ANgular:
    Inclure ngMessage

Déclarer une variable sans affichage:
    {{messageRequired="Ce champs est obligatoire."; ""}}
    // Affiche ""


Afficher le message d'erreur dans un formulaire Angular Material
            <div ng-messages="newPatientForm.name.$error" role="alert">
                <div ng-message-exp="['required', 'minlength', 'maxlength', 'pattern']">
                    Your email must be between 10 and 100 characters long and look like an e-mail address.
                    {{newPatientForm.name.$error}}
                </div>
            </div>

Débugger un formulaire: 
        <div>
            {{$ctrl}}
        </div>
        <div>
            {{newPatientForm.name.$error}}
        </div>

Formulaires avec messages génériques:
       <script type="text/ng-template" id="error-messages">
            <div ng-message="required">Ce champs est requis.</div>
            <div ng-message="pattern">Seuls les caractères suivants sont autorisés: [ a-z A-Z - ].</div>
            <div ng-message="maxlength">Vous ne pouvez utiliser que 50 caractères maximum.</div>
            <div ng-message="minlength">Vous devez utiliser 5 caractères minimum.</div>
        </script>

        <md-input-container class="md-block">
            <label>Name</label>
            <input name="name" ng-model="$ctrl.patient.name"
                   ng-minlength="5" ng-maxlength="50"  required  ng-messages-multiple/>
            <div ng-messages="newPatientForm.name.$error" role="alert" >
                <div ng-messages-include="error-messages"></div>
            </div>
        </md-input-container>

        ...

        Possibilité d'override de messages

Boucle ng-repeat:
        <li ng-repeat="(k, v) in $ctrl.data">
                {{k}}: {{v}}
        </li>

Remplir un vide entre des élements:
    <md-button href="http://en.wikipedia.org/wiki/Mango" target="_blank" md-autofocus>
        More on Wikipedia
    </md-button>
    <span flex></span>
    <md-button ng-c<lick="answer('not useful')">
        Not Useful
    </md-button>


Appeler une fenetre popup et y transmettre des données:
    var dialogTemplate = require("./patient-dialogtemplate.html");

    this.$mdDialog.show({
        locals: {parentCtrl: this}, // parametre a passer a l'instanciation du controleur
        controller: DialogController,
        controllerAs: '$ctrl', // le nom du controleur dans le code HTML du dialogue
        template: dialogTemplate,
        targetEvent: event,
        clickOutsideToClose: true,
        fullscreen: false
    });

ng-class: spécifier une ou des classes CSS conditionnelles

Bloc md-content permet dafficher du contenu dans un panneau scrollable (overflow: auto)
/!\: spécifier la hauteur pour que ça fonctionne (height: 100%)
